// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: flchain/committee/commit_att.proto

package types

import (
	encoding_binary "encoding/binary"
	fmt "fmt"
	proto "github.com/cosmos/gogoproto/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package


func (m *CommitAtt) Reset()         { *m = CommitAtt{} }
func (m *CommitAtt) String() string { return proto.CompactTextString(m) }
func (*CommitAtt) ProtoMessage()    {}
func (*CommitAtt) Descriptor() ([]byte, []int) {
	return fileDescriptor_a60c45b7a24e78cb, []int{0}
}
func (m *CommitAtt) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CommitAtt) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CommitAtt.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CommitAtt) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CommitAtt.Merge(m, src)
}
func (m *CommitAtt) XXX_Size() int {
	return m.Size()
}
func (m *CommitAtt) XXX_DiscardUnknown() {
	xxx_messageInfo_CommitAtt.DiscardUnknown(m)
}

var xxx_messageInfo_CommitAtt proto.InternalMessageInfo

func (m *CommitAtt) GetRound() uint64 {
	if m != nil {
		return m.Round
	}
	return 0
}

func (m *CommitAtt) GetEwmaMap() map[string]float64 {
	if m != nil {
		return m.EwmaMap
	}
	return nil
}

func (m *CommitAtt) GetSwMap() map[string]float64 {
	if m != nil {
		return m.SwMap
	}
	return nil
}

func (m *CommitAtt) GetRanking() []string {
	if m != nil {
		return m.Ranking
	}
	return nil
}

func (m *CommitAtt) GetClNode() string {
	if m != nil {
		return m.ClNode
	}
	return ""
}

func (m *CommitAtt) GetCommittee() []string {
	if m != nil {
		return m.Committee
	}
	return nil
}

func init() {
	proto.RegisterType((*CommitAtt)(nil), "flchain.committee.CommitAtt")
	proto.RegisterMapType((map[string]float64)(nil), "flchain.committee.CommitAtt.EwmaMapEntry")
	proto.RegisterMapType((map[string]float64)(nil), "flchain.committee.CommitAtt.SwMapEntry")
}

func init() {
	proto.RegisterFile("flchain/committee/commit_att.proto", fileDescriptor_a60c45b7a24e78cb)
}

var fileDescriptor_a60c45b7a24e78cb = []byte{
	// 293 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x52, 0x4a, 0xcb, 0x49, 0xce,
	0x48, 0xcc, 0xcc, 0xd3, 0x4f, 0xce, 0xcf, 0xcd, 0xcd, 0x2c, 0x29, 0x49, 0x4d, 0x85, 0xb2, 0xe2,
	0x13, 0x4b, 0x4a, 0xf4, 0x0a, 0x8a, 0xf2, 0x4b, 0xf2, 0x85, 0x04, 0xa1, 0x6a, 0xf4, 0xe0, 0x6a,
	0x94, 0x5e, 0x33, 0x71, 0x71, 0x3a, 0x83, 0x79, 0x8e, 0x25, 0x25, 0x42, 0x22, 0x5c, 0xac, 0x45,
	0xf9, 0xa5, 0x79, 0x29, 0x12, 0x8c, 0x0a, 0x8c, 0x1a, 0x2c, 0x41, 0x10, 0x8e, 0x90, 0x33, 0x17,
	0x7b, 0x6a, 0x79, 0x6e, 0xa2, 0x6f, 0x62, 0x81, 0x04, 0x93, 0x02, 0xb3, 0x06, 0xb7, 0x91, 0xa6,
	0x1e, 0x86, 0x41, 0x7a, 0x70, 0x43, 0xf4, 0x5c, 0x21, 0x6a, 0x5d, 0xf3, 0x4a, 0x8a, 0x2a, 0x83,
	0x60, 0x3a, 0x85, 0x6c, 0xb9, 0x58, 0x8b, 0xcb, 0x41, 0x46, 0x30, 0x83, 0x8d, 0x50, 0xc7, 0x6b,
	0x44, 0x70, 0x39, 0xdc, 0x00, 0x88, 0x2e, 0x21, 0x09, 0x2e, 0xf6, 0xa2, 0xc4, 0xbc, 0xec, 0xcc,
	0xbc, 0x74, 0x09, 0x16, 0x05, 0x66, 0x0d, 0xce, 0x20, 0x18, 0x57, 0x48, 0x8c, 0x8b, 0x2d, 0x39,
	0xc7, 0x2f, 0x3f, 0x25, 0x55, 0x82, 0x55, 0x81, 0x51, 0x83, 0x33, 0x08, 0xca, 0x13, 0x92, 0xe1,
	0xe2, 0x84, 0x1b, 0x2d, 0xc1, 0x06, 0xd6, 0x83, 0x10, 0x90, 0xb2, 0xe2, 0xe2, 0x41, 0x76, 0xa7,
	0x90, 0x00, 0x17, 0x73, 0x76, 0x6a, 0x25, 0xd8, 0xdf, 0x9c, 0x41, 0x20, 0x26, 0x28, 0x2c, 0xca,
	0x12, 0x73, 0x4a, 0x53, 0x25, 0x98, 0x14, 0x18, 0x35, 0x18, 0x83, 0x20, 0x1c, 0x2b, 0x26, 0x0b,
	0x46, 0x29, 0x0b, 0x2e, 0x2e, 0x84, 0x03, 0x49, 0xd1, 0xe9, 0x64, 0x7c, 0xe2, 0x91, 0x1c, 0xe3,
	0x85, 0x47, 0x72, 0x8c, 0x0f, 0x1e, 0xc9, 0x31, 0x4e, 0x78, 0x2c, 0xc7, 0x70, 0xe1, 0xb1, 0x1c,
	0xc3, 0x8d, 0xc7, 0x72, 0x0c, 0x51, 0x92, 0xb0, 0xe8, 0xab, 0x40, 0x8a, 0xc0, 0x92, 0xca, 0x82,
	0xd4, 0xe2, 0x24, 0x36, 0x70, 0xe4, 0x19, 0x03, 0x02, 0x00, 0x00, 0xff, 0xff, 0x7f, 0x49, 0x95,
	0xd7, 0xe2, 0x01, 0x00, 0x00,
}

func (m *CommitAtt) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CommitAtt) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CommitAtt) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Committee) > 0 {
		for iNdEx := len(m.Committee) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Committee[iNdEx])
			copy(dAtA[i:], m.Committee[iNdEx])
			i = encodeVarintCommitAtt(dAtA, i, uint64(len(m.Committee[iNdEx])))
			i--
			dAtA[i] = 0x32
		}
	}
	if len(m.ClNode) > 0 {
		i -= len(m.ClNode)
		copy(dAtA[i:], m.ClNode)
		i = encodeVarintCommitAtt(dAtA, i, uint64(len(m.ClNode)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Ranking) > 0 {
		for iNdEx := len(m.Ranking) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Ranking[iNdEx])
			copy(dAtA[i:], m.Ranking[iNdEx])
			i = encodeVarintCommitAtt(dAtA, i, uint64(len(m.Ranking[iNdEx])))
			i--
			dAtA[i] = 0x22
		}
	}
	if len(m.SwMap) > 0 {
		for k := range m.SwMap {
			v := m.SwMap[k]
			baseI := i
			i -= 8
			encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(v))))
			i--
			dAtA[i] = 0x11
			i -= len(k)
			copy(dAtA[i:], k)
			i = encodeVarintCommitAtt(dAtA, i, uint64(len(k)))
			i--
			dAtA[i] = 0xa
			i = encodeVarintCommitAtt(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.EwmaMap) > 0 {
		for k := range m.EwmaMap {
			v := m.EwmaMap[k]
			baseI := i
			i -= 8
			encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(v))))
			i--
			dAtA[i] = 0x11
			i -= len(k)
			copy(dAtA[i:], k)
			i = encodeVarintCommitAtt(dAtA, i, uint64(len(k)))
			i--
			dAtA[i] = 0xa
			i = encodeVarintCommitAtt(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x12
		}
	}
	if m.Round != 0 {
		i = encodeVarintCommitAtt(dAtA, i, uint64(m.Round))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintCommitAtt(dAtA []byte, offset int, v uint64) int {
	offset -= sovCommitAtt(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *CommitAtt) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Round != 0 {
		n += 1 + sovCommitAtt(uint64(m.Round))
	}
	if len(m.EwmaMap) > 0 {
		for k, v := range m.EwmaMap {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovCommitAtt(uint64(len(k))) + 1 + 8
			n += mapEntrySize + 1 + sovCommitAtt(uint64(mapEntrySize))
		}
	}
	if len(m.SwMap) > 0 {
		for k, v := range m.SwMap {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovCommitAtt(uint64(len(k))) + 1 + 8
			n += mapEntrySize + 1 + sovCommitAtt(uint64(mapEntrySize))
		}
	}
	if len(m.Ranking) > 0 {
		for _, s := range m.Ranking {
			l = len(s)
			n += 1 + l + sovCommitAtt(uint64(l))
		}
	}
	l = len(m.ClNode)
	if l > 0 {
		n += 1 + l + sovCommitAtt(uint64(l))
	}
	if len(m.Committee) > 0 {
		for _, s := range m.Committee {
			l = len(s)
			n += 1 + l + sovCommitAtt(uint64(l))
		}
	}
	return n
}

func sovCommitAtt(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozCommitAtt(x uint64) (n int) {
	return sovCommitAtt(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *CommitAtt) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCommitAtt
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CommitAtt: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CommitAtt: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Round", wireType)
			}
			m.Round = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommitAtt
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Round |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EwmaMap", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommitAtt
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCommitAtt
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCommitAtt
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.EwmaMap == nil {
				m.EwmaMap = make(map[string]float64)
			}
			var mapkey string
			var mapvalue float64
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowCommitAtt
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowCommitAtt
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthCommitAtt
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthCommitAtt
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var mapvaluetemp uint64
					if (iNdEx + 8) > l {
						return io.ErrUnexpectedEOF
					}
					mapvaluetemp = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
					iNdEx += 8
					mapvalue = math.Float64frombits(mapvaluetemp)
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipCommitAtt(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthCommitAtt
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.EwmaMap[mapkey] = mapvalue
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SwMap", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommitAtt
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCommitAtt
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCommitAtt
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.SwMap == nil {
				m.SwMap = make(map[string]float64)
			}
			var mapkey string
			var mapvalue float64
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowCommitAtt
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowCommitAtt
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthCommitAtt
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthCommitAtt
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var mapvaluetemp uint64
					if (iNdEx + 8) > l {
						return io.ErrUnexpectedEOF
					}
					mapvaluetemp = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
					iNdEx += 8
					mapvalue = math.Float64frombits(mapvaluetemp)
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipCommitAtt(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthCommitAtt
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.SwMap[mapkey] = mapvalue
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ranking", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommitAtt
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommitAtt
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCommitAtt
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Ranking = append(m.Ranking, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClNode", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommitAtt
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommitAtt
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCommitAtt
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ClNode = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Committee", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommitAtt
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommitAtt
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCommitAtt
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Committee = append(m.Committee, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCommitAtt(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCommitAtt
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipCommitAtt(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowCommitAtt
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCommitAtt
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCommitAtt
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthCommitAtt
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupCommitAtt
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthCommitAtt
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthCommitAtt        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowCommitAtt          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupCommitAtt = fmt.Errorf("proto: unexpected end of group")
)
